// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

// An object with an ID.
type Node interface {
	IsNode()
	// The id of the object.
	GetID() string
}

// Information about pagination in a connection.
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

func (Person) IsNode() {}

// The id of the object.
func (this Person) GetID() string { return this.ID }

// A connection to a list of items.
type PilotsConnection struct {
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []*PilotsEdge `json:"edges,omitempty"`
	// A count of the total number of objects in this connection, ignoring pagination.
	// This allows a client to fetch the first five objects by passing "5" as the
	// argument to "first", then fetch the total count so it could display "5 of 83",
	// for example.
	TotalCount *int `json:"totalCount,omitempty"`
	// A list of all of the objects returned in the connection. This is a convenience
	// field provided for quickly exploring the API; rather than querying for
	// "{ edges { node } }" when no edge data is needed, this field can be be used
	// instead. Note that when clients like Relay need to fetch the "cursor" field on
	// the edge to enable efficient pagination, this shortcut cannot be used, and the
	// full "{ edges { node } }" version should be used instead.
	Pilots []*Person `json:"pilots,omitempty"`
}

// An edge in a connection.
type PilotsEdge struct {
	// The item at the end of the edge.
	Node *Person `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

func (Starship) IsNode() {}

// The id of the object.
func (this Starship) GetID() string { return this.ID }

// A connection to a list of items.
type StarshipsConnection struct {
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []*StarshipsEdge `json:"edges,omitempty"`
	// A count of the total number of objects in this connection, ignoring pagination.
	// This allows a client to fetch the first five objects by passing "5" as the
	// argument to "first", then fetch the total count so it could display "5 of 83",
	// for example.
	TotalCount *int `json:"totalCount,omitempty"`
	// A list of all of the objects returned in the connection. This is a convenience
	// field provided for quickly exploring the API; rather than querying for
	// "{ edges { node } }" when no edge data is needed, this field can be be used
	// instead. Note that when clients like Relay need to fetch the "cursor" field on
	// the edge to enable efficient pagination, this shortcut cannot be used, and the
	// full "{ edges { node } }" version should be used instead.
	Starships []*Starship `json:"starships,omitempty"`
}

// An edge in a connection.
type StarshipsEdge struct {
	// The item at the end of the edge.
	Node *Starship `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}
